CREATE OR REPLACE PACKAGE PKG_ARCH_MV IS

  ----------------------------------------------------------------------------------------------------------
  -- List T_MOVIMIENTOS por Fecha y Empresa
  ----------------------------------------------------------------------------------------------------------
  -- Si la pagina es igual a CERO, se devuelve en o_CANTIDAD_REGISTOS con el count(*) del resulset y
  -- no se devuelve nada en la variable de salida o_CURSOR
  ----------------------------------------------------------------------------------------------------------
  PROCEDURE SP_LIST_MOV_FEC_EMP(I_FEC_MOVIMIENTO_DESDE      IN T_MOVIMIENTOS.FEC_MOVIMIENTO%TYPE
                               ,I_FEC_MOVIMIENTO_HASTA      IN T_MOVIMIENTOS.FEC_MOVIMIENTO%TYPE
                               ,I_LISTA_ID_EMPRESA          IN VARCHAR2 DEFAULT NULL
                               ,I_LISTA_ID_ADMINISTRADORA   IN VARCHAR2 DEFAULT NULL
                               ,I_LISTA_ID_RESULTADO        IN VARCHAR2 DEFAULT NULL
                               ,I_LISTA_ID_TIPO_EMPRESA     IN VARCHAR2 DEFAULT NULL
                               ,I_LISTA_ID_VALIDACIONES     IN VARCHAR2 DEFAULT NULL
                               ,I_LISTA_ID_TIPO_SOLICITANTE IN VARCHAR2 DEFAULT NULL
                               ,I_LIQUIDADO_SN              IN T_MOVIMIENTOS.LIQUIDADO_SN%TYPE DEFAULT NULL
                               ,I_CUIT_EMPRESA              IN VARCHAR2 DEFAULT NULL
                               ,I_CUIL                      IN T_MOVIMIENTOS.CUIL%TYPE DEFAULT NULL
                               ,I_PROGRAMA                  IN T_MOVIMIENTOS.ID_PROGRAMA%TYPE
                               ,O_CURSOR                    OUT SYS_REFCURSOR);

END PKG_ARCH_MV;
/
CREATE OR REPLACE PACKAGE BODY PKG_ARCH_MV IS
  ----------------------------------------------------------------------------------------------------------
  -- List T_MOVIMIENTOS por Fecha y Empresa
  ----------------------------------------------------------------------------------------------------------
  -- Si la pagina es igual a CERO, se devuelve en o_CANTIDAD_REGISTOS con el count(*) del resulset y
  -- no se devuelve nada en la variable de salida o_CURSOR
  ----------------------------------------------------------------------------------------------------------
  PROCEDURE SP_LIST_MOV_FEC_EMP(I_FEC_MOVIMIENTO_DESDE      IN T_MOVIMIENTOS.FEC_MOVIMIENTO%TYPE
                               ,I_FEC_MOVIMIENTO_HASTA      IN T_MOVIMIENTOS.FEC_MOVIMIENTO%TYPE
                               ,I_LISTA_ID_EMPRESA          IN VARCHAR2 DEFAULT NULL
                               ,I_LISTA_ID_ADMINISTRADORA   IN VARCHAR2 DEFAULT NULL
                               ,I_LISTA_ID_RESULTADO        IN VARCHAR2 DEFAULT NULL
                               ,I_LISTA_ID_TIPO_EMPRESA     IN VARCHAR2 DEFAULT NULL
                               ,I_LISTA_ID_VALIDACIONES     IN VARCHAR2 DEFAULT NULL
                               ,I_LISTA_ID_TIPO_SOLICITANTE IN VARCHAR2 DEFAULT NULL
                               ,I_LIQUIDADO_SN              IN T_MOVIMIENTOS.LIQUIDADO_SN%TYPE DEFAULT NULL
                               ,I_CUIT_EMPRESA              IN VARCHAR2 DEFAULT NULL
                               ,I_CUIL                      IN T_MOVIMIENTOS.CUIL%TYPE DEFAULT NULL
                               ,I_PROGRAMA                  IN T_MOVIMIENTOS.ID_PROGRAMA%TYPE
                               ,O_CURSOR                    OUT SYS_REFCURSOR) IS
  
    V_SQL        VARCHAR2(10000);
    V_SQLFILTROS VARCHAR2(10000);
  
  BEGIN
  
    IF NOT REGEXP_LIKE(I_LISTA_ID_EMPRESA, '^(\d+(,\d+)*)?$')
       AND I_LISTA_ID_EMPRESA IS NOT NULL
    THEN
      RAISE_APPLICATION_ERROR(-20001
                             ,'El parametro i_LISTA_ID_EMPRESA tiene un valor incompatible con una lista de enteros separados por comas');
    END IF;
  
    IF NOT REGEXP_LIKE(I_LISTA_ID_ADMINISTRADORA, '^(\d+(,\d+)*)?$')
       AND I_LISTA_ID_ADMINISTRADORA IS NOT NULL
    THEN
      RAISE_APPLICATION_ERROR(-20001
                             ,'El parametro i_LISTA_ID_ADMINISTRADORA tiene un valor incompatible con una lista de enteros separados por comas');
    END IF;
  
    IF NOT REGEXP_LIKE(I_LISTA_ID_RESULTADO, '^(\d+(,\d+)*)?$')
       AND I_LISTA_ID_RESULTADO IS NOT NULL
    THEN
      RAISE_APPLICATION_ERROR(-20001
                             ,'El parametro i_LISTA_ID_ADMINISTRADORA tiene un valor incompatible con una lista de enteros separados por comas');
    END IF;
  
    IF NOT REGEXP_LIKE(I_LISTA_ID_TIPO_EMPRESA, '^(\d+(,\d+)*)?$')
       AND I_LISTA_ID_TIPO_EMPRESA IS NOT NULL
    THEN
      RAISE_APPLICATION_ERROR(-20001
                             ,'El parametro i_LISTA_ID_TIPO_EMPRESA tiene un valor incompatible con una lista de enteros separados por comas');
    END IF;
  
    IF NOT REGEXP_LIKE(I_LISTA_ID_VALIDACIONES, '^(\d+(,\d+)*)?$')
       AND I_LISTA_ID_VALIDACIONES IS NOT NULL
    THEN
      RAISE_APPLICATION_ERROR(-20001
                             ,'El parametro I_LISTA_ID_VALIDACIONES tiene un valor incompatible con una lista de enteros separados por comas');
    END IF;
  
    IF NOT REGEXP_LIKE(I_LISTA_ID_TIPO_SOLICITANTE, '^(\d+(,\d+)*)?$')
       AND I_LISTA_ID_TIPO_SOLICITANTE IS NOT NULL
    THEN
      RAISE_APPLICATION_ERROR(-20001
                             ,'El parametro i_LISTA_ID_TIPO_SOLICITANTE tiene un valor incompatible con una lista de enteros separados por comas');
    END IF;
  
    -- Armar Filtros
  
    IF I_FEC_MOVIMIENTO_DESDE IS NOT NULL
    THEN
      V_SQLFILTROS := V_SQLFILTROS ||
                      ' AND trunc(fec_movimiento) >= to_date( ''' ||
                      TO_CHAR(I_FEC_MOVIMIENTO_DESDE, 'DD/MM/YYYY') ||
                      ''', ''DD/MM/YYYY'' )';
    END IF;
  
    IF I_FEC_MOVIMIENTO_HASTA IS NOT NULL
    THEN
      V_SQLFILTROS := V_SQLFILTROS ||
                      ' and trunc(fec_movimiento) <= to_date( ''' ||
                      TO_CHAR(I_FEC_MOVIMIENTO_HASTA, 'DD/MM/YYYY') ||
                      ''', ''DD/MM/YYYY'' )';
    END IF;
  
    IF I_LISTA_ID_EMPRESA IS NOT NULL
    THEN
      V_SQLFILTROS := V_SQLFILTROS || ' and id_empresa in( ' ||
                      I_LISTA_ID_EMPRESA || ' )';
    END IF;
  
    IF I_LISTA_ID_ADMINISTRADORA IS NOT NULL
    THEN
      V_SQLFILTROS := V_SQLFILTROS || ' and ID_ADMINISTRADORA in( ' ||
                      I_LISTA_ID_ADMINISTRADORA || ' )';
    END IF;
  
    IF I_LISTA_ID_RESULTADO IS NOT NULL
    THEN
    
      V_SQLFILTROS := V_SQLFILTROS || ' and ID_RESULTADO in( ' ||
                      I_LISTA_ID_RESULTADO || ' )';
    END IF;
  
    IF I_LISTA_ID_TIPO_EMPRESA IS NOT NULL
    THEN
    
      V_SQLFILTROS := V_SQLFILTROS || ' and ID_TIPO_EMPRESA in( ' ||
                      I_LISTA_ID_TIPO_EMPRESA || ' )';
    END IF;
  
    IF I_LISTA_ID_TIPO_SOLICITANTE IS NOT NULL
    THEN
      V_SQLFILTROS := V_SQLFILTROS || ' and ID_TIPO_SOLICITANTE in( ' ||
                      I_LISTA_ID_TIPO_SOLICITANTE || ' )';
    END IF;
  
    IF I_LISTA_ID_VALIDACIONES IS NOT NULL
    THEN
      V_SQLFILTROS := V_SQLFILTROS ||
                      ' and ID_MOVIMIENTO in( SELECT id_movimiento
                                                FROM T_MOVIMIENTO_RECHAZO
                                               WHERE id_movimiento = mv.id_movimiento
                                                 AND id_validacion IN(' ||
                      I_LISTA_ID_VALIDACIONES || '))';
    END IF;
  
    IF I_CUIL IS NOT NULL
    THEN
      V_SQLFILTROS := V_SQLFILTROS || ' and CUIL = ''' || I_CUIL || '''';
    END IF;
  
    IF I_LIQUIDADO_SN IS NOT NULL
    THEN
      -- las vistas tienen nombres distintos en esta columna...
      IF I_CUIL IS NULL
         AND I_LISTA_ID_VALIDACIONES IS NULL
      THEN
      
        V_SQLFILTROS := V_SQLFILTROS || ' and NVL(LIQUIDADO,''N'') = ''' ||
                        I_LIQUIDADO_SN || ''' ';
      
      ELSE
      
        V_SQLFILTROS := V_SQLFILTROS || ' and NVL(LIQUIDADO_SN,''N'') = ''' ||
                        I_LIQUIDADO_SN || ''' ';
      
      END IF;
    
    END IF;
  
    IF I_CUIT_EMPRESA IS NOT NULL
    THEN
      V_SQLFILTROS := V_SQLFILTROS || ' and CUIT_EMPRESA = ''' ||
                      I_CUIT_EMPRESA || '''';
    END IF;
  
    IF I_CUIL IS NULL
       AND I_LISTA_ID_VALIDACIONES IS NULL
    THEN
      V_SQL := 'SELECT p.id_periodo,
                       p.n_periodo,
                       fec_movimiento,
                       id_resultado,
                       n_resultado,
                       boletos, 
                       id_tipo_movimiento,
                       N_TIPO_MOVIMIENTO,
                       errores,
                       id_empresa, 
                       razon_social,
                       id_administradora,
                       N_ADMINISTRADORA,
                       beneficiarios, 
                       id_tipo_solicitante,
                       n_tipo_solicitante,
                       validado,
                       valorizado,
                       id_tipo_empresa,
                       n_tipo_empresa,
                       cuit_empresa,
                       liquidado,
                       tiene_fec_liquidacion,
                       monto_total,
                       monto_total_sgn_adm, 
                       monto_gobierno
                  FROM VT_MOV_FEC_EMP mv 
                     , t_periodos_liquidacion p
                 where mv.fec_movimiento between p.fec_desde and (p.fec_hasta+1) -1/24/60/60
                 AND p.ID_PROGRAMA=' || I_PROGRAMA || '
                 ' || V_SQLFILTROS || '
                 ORDER BY 1';
                 
    ELSE
      V_SQL := 'SELECT p.id_periodo,
                       p.n_periodo,
                       fec_movimiento,
                       id_resultado,
                       n_resultado,
                       sum( boletos ) as boletos, 
                       id_tipo_movimiento,
                       N_TIPO_MOVIMIENTO,
                       errores,
                       id_empresa, 
                       n_empresa razon_social,
                       id_administradora,
                       N_ADMINISTRADORA,
                       count(distinct CUIL) as beneficiarios, 
                       id_tipo_solicitante,
                       n_tipo_solicitante,
                       validacion,
                       valorizacion,
                       id_tipo_empresa,
                       n_tipo_empresa, 
							         cuit_empresa,		
                       liquidado_sn,
                       tiene_fec_liquidacion,
                       sum( monto_total ) as monto_total,
                       sum( monto_total_sgn_adm ) as monto_total_sgn_adm, 
                       sum( monto_gobierno ) as monto_gobierno
                  FROM VT_MOV_FEC_EMP_CUIL mv 
                     , t_periodos_liquidacion p
                 where mv.fec_movimiento between p.fec_desde and (p.fec_hasta+1) -1/24/60/60
                 AND p.ID_PROGRAMA = ' || I_PROGRAMA || '
                 ' || V_SQLFILTROS || '
                 GROUP BY p.id_periodo,
                          p.n_periodo,
                          fec_movimiento,
                          id_resultado,
                          n_resultado,
                          id_tipo_movimiento,
                          N_TIPO_MOVIMIENTO,
                          errores,
                          id_empresa, 
                          n_empresa,
                          id_administradora,
                          N_ADMINISTRADORA,
                          id_tipo_solicitante,
                          n_tipo_solicitante,
                          validacion,
                          valorizacion,
                          id_tipo_empresa,
                          n_tipo_empresa,
							            cuit_empresa,
                          liquidado_sn,
                          tiene_fec_liquidacion
                    ORDER BY 1';
    END IF;
  
    DBMS_OUTPUT.PUT_LINE(V_SQL);
  
    OPEN O_CURSOR FOR V_SQL;
  
  EXCEPTION
    WHEN OTHERS THEN
      ROLLBACK;
      RAISE_APPLICATION_ERROR(-20002
                             ,'Error al recuperar el listado de movimientos. ' ||
                              SQLERRM);
  END SP_LIST_MOV_FEC_EMP;

END PKG_ARCH_MV;
/